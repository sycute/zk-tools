
#[test_only]
module zkrp::zkrp_tests;

use std::debug::print;
use sui::groth16;

// diffirent from akr-works
#[test]
fun print_pvk_bytes_for_sui() {
    // this is from zkey file
    let vk_bytes = x"e2f26dbea299f5223b646cb1fb33eadb059d9407559d7441dfd902e3a79a4d2dabb73dc17fbc13021e2471e0c08bd67d8401f52b73d6d07483794cad4778180e0c06f33bbc4c79a9cadef253a68084d382f17788f885c9afd176f7cb2f036789edf692d95cbdde46ddda5ef7d422436779445c5e66006a42761e1f12efde0018c212f3aeb785e49712e7a9353349aaf1255dfb31b7bf60723a480d9293938e197c1f4ede10b2d15fc293b236d807076dd40678439b4f37371d8586ce11d00019bb4a2eb16f113f01ae4ba0ec6064f76d33d2d62ec1fb47c08ac13925711aed02020000000000000061de9dbe26857523b34a4b3aff5a1ec07f476697c4b35014b1b585acfc01a9835a0df67ef8632191164c67f274de355176281987dffb02fb824d9fc4787f7924";
    let pvk = groth16::prepare_verifying_key(&groth16::bn254(), &vk_bytes);
    print(&groth16::pvk_to_bytes(pvk));
}

#[test]
fun test_move() {
    // from test: print_pvk_bytes_for_sui, diffirent from akr-works
    let vk_gamma_abc_g1_bytes= x"61de9dbe26857523b34a4b3aff5a1ec07f476697c4b35014b1b585acfc01a9835a0df67ef8632191164c67f274de355176281987dffb02fb824d9fc4787f7924";
    let alpha_g1_beta_g2_bytes = x"0d14dc30b678357d988b3eb0e8ada11bc7b2b5d2cf0c1fe27522cb2a819b7c044a601bd9302a94a80677a9f72ebeaada131e9bfba30621c8f038b547beb9962e182089742c1d388436771390c6af9937729c39e6414746ee5636c4741d1f220df45c80a7cded5ad653bc4f8b201c94054918dee160e1dc90cea027d4ec69e01a6df0f8d739d7911aa63b6b6923f10cdce763de1046fe0f91d590f5f510397611c57ac6daac2f9222d8cc3130e57f99dcd2edecb3e1d11b860c0d9d64a5dda30f42b8a8e513c9d5983486332c3ecd1236192b988666c15818838559bc27b6a50f49fee88fd43ac88dc3e75419bfd451374e25b8c4845b4bfcbd460ad48bb55016e4e1edf293696a43b76c8a5feffe6cfddb59cd7bc0246c1784061ed3eff2280a74e56fcabc5b93d84d72e10a0ad78079b02d06cc8c3ae435936ce2e85722d82b9480a46f039988a80cf4ca669c026100f8ce3fbc5298180dec08d2055d7a621ad3cc4fdd99242a86d7c80528d3b438c4669288c56b77abb8367528a31f01c511";
    let gamma_g2_neg_pc_bytes = x"edf692d95cbdde46ddda5ef7d422436779445c5e66006a42761e1f12efde0018c212f3aeb785e49712e7a9353349aaf1255dfb31b7bf60723a480d9293938e99";
    let delta_g2_neg_pc_bytes = x"7c1f4ede10b2d15fc293b236d807076dd40678439b4f37371d8586ce11d00019bb4a2eb16f113f01ae4ba0ec6064f76d33d2d62ec1fb47c08ac13925711aed82";

    let pvk = groth16::pvk_from_bytes(vk_gamma_abc_g1_bytes, alpha_g1_beta_g2_bytes,gamma_g2_neg_pc_bytes,delta_g2_neg_pc_bytes);

    let pub_inputs_bytes = x"0fbd1d3ac37b96e52be719a10ff37d53ccfb7f21313e3dd47f5b3915ca173809";
    let inputs = groth16::public_proof_inputs_from_bytes(pub_inputs_bytes);

    let proof_p_bytes = x"5934cb0d46413156497a76bbddf9eac163ccef7803b3a5f784aebe4d4450d680cb11c10f18f19e23a7a67b27d4bf0080d3ac723e43383db0e2b199c12baba31dbe59513d0c589cfc9ca0e539a554c94b125ab2b4eb0de954363a2fea126de8252eba37c750d4793c2c33a1660b984f3d39685b6b07db249d6bbe19dff454caaf";
    let proof = groth16::proof_points_from_bytes(proof_p_bytes);

    let verified = groth16::verify_groth16_proof(&groth16::bn254(), &pvk, &inputs, &proof);

    assert!(verified)
}

